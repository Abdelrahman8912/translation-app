# -*- coding: utf-8 -*-
"""Language_Translation_and_Grammar_Tool.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yzaH1atJut-cM1gNqS45U-6YfHGcH7ka
"""

!pip install --upgrade pip
!pip install transformers gradio torch sentencepiece huggingface-hub --quiet

# الخطوة 1: تثبيت مكتبات Hugging Face
!pip install transformers sentencepiece torch -q

# الخطوة 2: استيراد pipeline
from transformers import pipeline

# الخطوة 3: اختيار الموديل المناسب
translator = pipeline("translation", model="Helsinki-NLP/opus-mt-ar-en")

# الخطوة 4: تجربة الترجمة
# text = "أحياناً أزور صديقي في الجامعة"
# result = translator(text)[0]['translation_text']

!pip install transformers gradio torch sentencepiece --quiet

from transformers import pipeline, AutoTokenizer, AutoModelForSeq2SeqLM
import gradio as gr

# 🔹 اللغات المدعومة
SUPPORTED_LANGS = {
    "English": "en",
    "Arabic": "ar",
    "French": "fr"
}

_translation_pipelines = {}
_grammar_pipelines = {}


# 🔹 دالة تحميل موديل الترجمة
def get_translation_pipeline(src, tgt):
    key = f"{src}-{tgt}"
    if key in _translation_pipelines:
        return _translation_pipelines[key]
    model_name = f"Helsinki-NLP/opus-mt-{src}-{tgt}"
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForSeq2SeqLM.from_pretrained(model_name)
    pipe = pipeline("translation", model=model, tokenizer=tokenizer)
    _translation_pipelines[key] = pipe
    return pipe


# 🔹 دالة تحميل موديل تصحيح القواعد حسب اللغة
def get_grammar_pipeline(lang):
    if lang in _grammar_pipelines:
        return _grammar_pipelines[lang]

    if lang == "Arabic":
        model_name = "qcri/arabic-roberta-base-sentence-correction"
        pipe = pipeline("text2text-generation", model=model_name, tokenizer=model_name)
    else:
        model_name = "prithivida/grammar_error_correcter_v1"
        pipe = pipeline("text2text-generation", model=model_name, tokenizer=model_name)

    _grammar_pipelines[lang] = pipe
    return pipe


# 🔹 دالة الترجمة
def translate(text, src_lang, tgt_lang):
    if not text.strip():
        return "⚠️ الرجاء إدخال نص."
    if src_lang == tgt_lang:
        return text
    src = SUPPORTED_LANGS[src_lang]
    tgt = SUPPORTED_LANGS[tgt_lang]
    pipe = get_translation_pipeline(src, tgt)
    result = pipe(text)[0]['translation_text']
    return result


# 🔹 دالة تصحيح القواعد (إنجليزي + عربي)
def grammar_check(text, lang):
    if not text.strip():
        return "⚠️ الرجاء إدخال نص."
    pipe = get_grammar_pipeline(lang)
    result = pipe(text)[0]
    if "generated_text" in result:
        return result["generated_text"]
    elif "text" in result:
        return result["text"]
    return str(result)


# 🔹 واجهة Gradio
def launch_demo():
    with gr.Blocks() as demo:
        gr.Markdown("## 🌍 Language Translation & Grammar Correction Tool (Arabic + English)")

        text_input = gr.Textbox(lines=6, label="Enter your text:")
        src_lang = gr.Dropdown(list(SUPPORTED_LANGS.keys()), value="English", label="Source Language")
        tgt_lang = gr.Dropdown(list(SUPPORTED_LANGS.keys()), value="Arabic", label="Target Language")

        with gr.Row():
            translate_btn = gr.Button("Translate")
            grammar_btn = gr.Button("Grammar Check")
            clear_btn = gr.Button("Clear")

        output_box = gr.Textbox(lines=6, label="Output")

        translate_btn.click(translate, inputs=[text_input, src_lang, tgt_lang], outputs=output_box)
        grammar_btn.click(grammar_check, inputs=[text_input, src_lang], outputs=output_box)
        clear_btn.click(lambda: "", outputs=output_box)

    demo.launch(share=True)


# ✅ تشغيل التطبيق
launch_demo()

Running on public URL: https://xxxx.gradio.live

# Commented out IPython magic to ensure Python compatibility.
# %%writefile requirements.txt
# transformers
# torch
# sentencepiece
# gradio
# accelerate
# sacremoses
#

from google.colab import files
files.download("requirements.txt")